quarkus.log.category.\"io.quarkiverse.langchain4j\".level=TRACE
quarkus.log.category.\"io.quarkiverse.langchain4j\".min-level=TRACE
# REST client logging, if needed
#quarkus.rest-client.logging.scope=request-response
#quarkus.rest-client.logging.body-limit=10000
quarkus.log.category.\"org.jboss.resteasy.reactive.client.logging\".level=DEBUG
# avoid Qute escaping HTML elements when passing HTML into templates
quarkus.qute.escape-content-types=application/xml

# file was obtained from https://newsdata.io/historical-news-download
# TODO: make sure this works in prod mode too
data.file=src/main/resources/news.json

# --------------------------- Embedding model config
#quarkus.langchain4j.embedding-model.provider=dev.langchain4j.model.embedding.AllMiniLmL6V2QuantizedEmbeddingModel
#DIMENSION=384

quarkus.langchain4j.embedding-model.provider=openai
DIMENSION=1536
quarkus.langchain4j.openai.embedding-model.model-name=text-embedding-ada-002

# --------------------------- Embedding storage config

# REDIS
# To run the db manually:
# podman run --rm -p 6379:6379 redis/redis-stack:latest
quarkus.langchain4j.redis.dimension=${DIMENSION}
quarkus.redis.devservices.image-name=redis/redis-stack:latest
quarkus.redis.devservices.port=6379
# FIXME: this should be fixed in the redis embedding store by using a pipeline instead of a bazillion concurrent unis when inserting embeddings
quarkus.redis.max-pool-waiting=2000
#quarkus.langchain4j.redis.metadata-fields=k1,k3
%prod.quarkus.redis.rd1.hosts=redis://localhost:6379

# PGVECTOR
# to run the db manually:
# docker run --rm -p 5432:5432 -e POSTGRES_PASSWORD=postgres -e POSTGRES_USER=postgres -e POSTGRES_DB=postgres ankane/pgvector:v0.5.1
quarkus.datasource.devservices.image-name=ankane/pgvector:v0.5.1
quarkus.datasource.devservices.port=5432
quarkus.datasource.devservices.username=postgres
quarkus.datasource.devservices.password=postgres
quarkus.langchain4j.pgvector.dimension=${DIMENSION}
quarkus.langchain4j.pgvector.drop-table-first=true
%prod.quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/postgres
%prod.quarkus.datasource.password=postgres
%prod.quarkus.datasource.username=postgres

# CHROMA
# TODO

# PINECONE
# just make sure that you have these as env properties:
#QUARKUS_LANGCHAIN4J_PINECONE_ENVIRONMENT
#QUARKUS_LANGCHAIN4J_PINECONE_API_KEY
#QUARKUS_LANGCHAIN4J_PINECONE_PROJECT_ID
#QUARKUS_LANGCHAIN4J_PINECONE_INDEX_NAME

# MILVUS
# to run the db manually:
# sudo setenforce 0 # seems to be necessary :/
# podman-compose -f milvus-standalone-docker-compose.yml up
quarkus.langchain4j.milvus.dimension=${DIMENSION}
%prod.quarkus.langchain4j.milvus.host=localhost
%prod.quarkus.langchain4j.milvus.port=19530
quarkus.langchain4j.milvus.devservices.port=33333